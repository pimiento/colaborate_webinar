#+TITLE: Совместная разработка. Ветвление в GIT
#+EMAIL: @pvavilin
#+AUTHOR: @pvavilin
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [smallest]
#+LATEX_HEADER: \usetheme{default}
#+LATEX_HEADER: \usecolortheme{crane}
#+LATEX_HEADER: \RequirePackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\scriptsize}
#+LaTeX_HEADER: \lstset{basicstyle=\scriptsize\ttfamily}
#+LATEX_HEADER: \usebackgroundtemplate{\includegraphics[width=.99\paperwidth,height=.99\paperheight]{bg.jpeg}}
#+OPTIONS: \n:t ^:nil toc:nil
* Continuous Integration
  Все пушат прямо в /master/ (/main/)
  #+BEGIN_SRC sh :exports code
    git clone ssh://user@host/path/to/repo
    git add <some-file>
    git commit
    git push origin main
  #+END_SRC
  Важно всегда работать с последней версией /master/ (/main/) чтобы не было конфликтов.
  #+BEGIN_SRC sh :exports code
    git pull
    # vi /path/to/file
    git add /path/to/file
    git commit && git push origin main
  #+END_SRC
* pull rebase
**  
   Используя /rebase/ во время /pull/ вы не будете создавать дополнительный merge-коммит.
   #+BEGIN_SRC sh :exports code
     git pull --rebase origin main
   #+END_SRC
**  
   Или настроить автоматический ребейз
   #+BEGIN_SRC sh :exports code
     git config pull.rebase true
   #+END_SRC
* Разрешение конфликтов
  #+BEGIN_SRC sh :exports code
    git status
    # редактируете файлы с конфликтами
    git add <file>
    git rebase --continue
  #+END_SRC
* Git Feature Branch Workflow
  Для каждой новой /фичи/ или задачи создаётся новая ветка. Затем ветка сливается в основной код в /master/ (/main/)
  #+BEGIN_SRC sh :exports code
    git checkout -b features/feature-xxx
    # редактируем код
    git add <files>
    git commit
    git push -u origin features/feature-xxx
  #+END_SRC
* Правила работы с ветками
** Должно быть общее правило именования feature веток.
     #+BEGIN_QUOTE
     feature/<feature_name>
     #+END_QUOTE
     #+BEGIN_QUOTE
     task/<task-ID>
     #+END_QUOTE
* Правила работы с ветками
** Всегда начинайте feature ветку от текущего состояния основной ветки.
     #+BEGIN_SRC sh :exports code
       git pull  # git pull --rebase
       git branch -b feature/<feature_name>
     #+END_SRC
* Правила работы с ветками
** Перед созданием PR вливайте изменения из основной ветки. Все конфликты должны быть решены в вашей ветке!
     #+BEGIN_SRC sh :exports code
       git fetch origin main
       git rebase
     #+END_SRC
* Правила работы с ветками
** Долгоживущие feature ветки зло.
   Держите не более 1-2 дней. Для этого четко описывайте задачу, которую хотите решить в ветке.
* Правила работы с ветками
** Пишите тесты на свой код!
   После разрешения конфликтов слияния они вам здорово помогут.
* GitFlow
  - Данная модель отлично подходит для организации рабочего процесса на основе релизов.
  - Работа по модели Gitflow предусматривает создание специальной ветки для исправления ошибок в рабочем релизе.
  #+ATTR_LATEX: :width .5\textwidth
  [[file:gitflow.png]]
* Правила работы с GitFlow
  1. Релизная ветка (master, main, trunk).
     - Всегда стабильна, готова к работе в любой момент времени.
     - Работают только лиды/синьоры.
     - Изменения только через Pull Request (PR) из develop или hot-fix веток.
  2. Основная ветка разработки (develop).
     - Допускается краткосрочная неработоспособность.
     - Работает вся команда.
     - Изменения напрямую или через PR из функциональных веток.
  3. Функциональные ветки (feature/<name>), они же фича ветки.
     - Под каждого разработчика/фичу.
     - Изменения напрямую.
     - Порождается от develop ветки.
* Gerrit
  Gerrit это надстройка над GIT сервером. Он дополнительно даёт вам
  - Code Review
  - Контроль доступа к бранчам
  - История правок не засоряет log
  #+ATTR_LATEX: :width .4\textwidth
  [[file:gerrit.png]]
* Gerrit UI
  #+ATTR_LATEX: :width .7\textwidth
  [[file:gerrit-ui.png]]
* Литература
  - [[https://docs.google.com/presentation/d/1IQCRPHEIX-qKo7QFxsD3V62yhyGA9_5YsYXFOiBpgkk/view#slide=id.g4d6b1121f4_0_1320][GIT Concepts and Workflows]]
  - [[https://learngitbranching.js.org/][GIT branches]]
  - [[https://www.atlassian.com/ru/git/tutorials/comparing-workflows][GIT workflows]]
  - [[https://guides.github.com/introduction/flow/][GitHub flow]]
  - [[https://docs.google.com/presentation/d/1C73UgQdzZDw0gzpaEqIC6SPujZJhqamyqO1XOHjH-uk/view#slide=id.g4d6c16487b_1_24][Gerrit]]
* DevOps
  - Coding
  - Building
  - Testing
  - Deploying (packaging, releasing)
* Автоматизация DevOps
  #+BEGIN_CENTER
  __[[https://www.jenkins.io/][Jenkins]]__
  #+END_CENTER
  #+ATTR_LATEX: :width 1.1\textwidth
  [[file:jenkins.png]]
* Спринт 10: Командная работа
  #+ATTR_LATEX: :width 1.05\textwidth
  [[file:slack.png]]
* Избегаем блокировок
  1. В первую очередь пишем модели БД.
     - Каждая модель в отдельном файле.
     - Если модель для ForeignKey не существует, допустимо сделать /IntegerField/, затем заменить на /ForeignKey/.
  2. Если ваша ветка живет более 4-х часов, то вливайте изменения из основной ветки дважды в день. Все конфликты должны быть решены в вашей ветке!
  3. Поддерживайте тесную связь. Синхронизация Pull Request-ов, правок кода сильно ускорит работу над проектом. Задача лида быть всегда в курсе что происходит с проектом, кто над чем работает.
* Командные процессы
  1. Ежедневные встречи (daily meetings). Если нужна помощь в проведении, приглашайте наставников.
  2. Планирование в начале проекта и по необходимости в ходе работы.
  3. Совместная работа в трекере задач (Trello/Jira и т.п.).
  4. Команда обсуждает вопросы, по которым требуется помощь и делегирует лиду обсуждение этих вопросов с наставником.
* Пример командной работы
  https://github.com/pimiento/fake-blog
* Вопросы-ответы
  #+ATTR_LATEX: :width .6\textwidth
  [[file:questions.jpg]]
